name: PuNote Release

on:
  push:
    tags:
      - v*
    # branches:
    #   - main
  # pull_request:
  #   branches:
  #     - main
# env:
  # FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  build:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-24.04
            targets: apk,aab

          - platform: macos
            os: macos-latest
            aarch: universal
            targets: dmg,pkg

          - platform: windows
            os: windows-latest
            aarch: amd64
            targets: exe

          - platform: linux
            os: ubuntu-24.04
            aarch: amd64
            targets: appimage,deb,rpm
  
          # - platform: ios
          #   os: macos-latest
          #   aarch: universal
          #   targets: ipa

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/config@v3
        id: fvm-config-action
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get flutter dependencies
        run: flutter pub get    
        
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Setup Java
        if: startsWith(matrix.platform,'android')
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      
      - name: Build Android app
        if: startsWith(matrix.platform,'android')
        continue-on-error: true
        run: |
          flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      - name: Build MacOS app
        if: startsWith(matrix.platform,'macos')
        run: |
          node -v
          npm install -g appdmg
          flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      - name: Build Windows app
        if: startsWith(matrix.platform,'windows')
        # continue-on-error: true
        run: |
          wmic os get Caption,Version
          pwd
          ls "C:\Program Files (x86)\Inno Setup 6\Languages"
          cp "windows\packaging\exe\ChineseSimplified.isl" "C:\Program Files (x86)\Inno Setup 6\Languages"
          flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      - name: Build Linux app
        if: startsWith(matrix.platform,'linux')
        run: |
          # common env
          sudo apt install clang cmake ninja-build pkg-config libgtk-3-dev -y
          # rpm env
          sudo apt install rpm patchelf -y
          # appimage env
          sudo add-apt-repository universe -y
          sudo apt install libfuse2t64 locate -y
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/
          # build
          flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      - name: Upload app
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}
          path: dist/*/*

  release:
    needs: build
    if: always()
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download app from artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Display structure of downloaded files
        run: |
          pwd
          ls -R
      - name: Prepare release message
        run: |
          # Get pubspec.yaml version value
          sudo snap install yq
          VERSION=$(yq eval '.version' 'pubspec.yaml')
          echo "Version: $VERSION"

          pip install gitchangelog pystache mustache markdown
          TAG="${{ github.ref_name }}"
          sed -e "s|RELEASE_TAG|${TAG}|g" -e "s|VERSION|${VERSION}|g" ./.github/release_message.html > release.html
          echo -e "\n\n<details open markdown=1> <summary>All changes from $TAG to the latest commit:</summary>\n\n" >> release.html
          gitchangelog >> release.html  2>&1 || echo "Error in gitchangelog"
          echo -e "\n\n</details>" >> release.html

      - name: Release app
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/*/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: './release.html'
